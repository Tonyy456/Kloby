//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""1Keyboard"",
            ""id"": ""3ebafe5f-9e5f-4b5a-a72b-68727832ad06"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""63fb1167-d37f-4fce-b417-7519c78e0451"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pull"",
                    ""type"": ""Button"",
                    ""id"": ""b8d2755f-c038-4fa7-9fde-5d3988de21db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Push"",
                    ""type"": ""Button"",
                    ""id"": ""72f807be-4c2f-4e2e-ae60-87ea80897d0c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""e95cea04-26a1-4223-8430-7f7bd5a70ef9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""617db0b3-dcbb-4101-9724-dd5bf32060fa"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""83fbf7a4-f3ff-4770-86c4-340adcd3ffb6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4f6df294-4433-4fc6-bc2d-84f1762b4b7f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5bc6fd4c-a946-4908-ade4-beedf73fd08a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f2ee28df-f6d4-457a-96d1-89ce3babb41f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""549c3584-2116-4c17-8e87-acdede421f22"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b08935fd-77fe-4c46-99d1-ea331e1afa54"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3cd317e0-f1e5-429e-888f-2b7853bdfe52"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""2Keyboard"",
            ""id"": ""74c5c082-e696-4386-b123-cc0c4cf50b28"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""76ce9a8e-76c4-41b7-9211-0bd708023d36"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pull"",
                    ""type"": ""Button"",
                    ""id"": ""cde5be18-9a5d-4850-9e0b-0a430197c325"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Push"",
                    ""type"": ""Button"",
                    ""id"": ""faef47b9-ffd2-4022-ae1a-82043c396484"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""0234f1b6-8a47-4bf8-af8a-9de4c40a505c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4bfac199-312f-4f49-8fae-bfed87a9b78d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""85534182-21a3-4548-9e05-66c57387027c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""94890554-f2d6-4eb4-8b1c-7c70cc3e2d4c"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d0e23cc1-2ff1-4955-9b01-33859cf06f6b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""53642d57-30c9-4170-b0f0-05fde5b6c78e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d3012355-c1b3-4098-8d9b-5461ceab3469"",
                    ""path"": ""<Keyboard>/numpad0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5c535c4-3ee2-4cbc-ba00-0e3cdc3ac8db"",
                    ""path"": ""<Keyboard>/numpadPeriod"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95b918b7-23b0-4512-905d-bc24d1d0e086"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""1Controller"",
            ""id"": ""803be2a7-909b-4d52-98da-6d8e4f664cd5"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1ec4f5d4-63b6-4f8e-adf6-56f32ff9af95"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pull"",
                    ""type"": ""Button"",
                    ""id"": ""5d3614ed-4d55-4785-a2e4-7f5299d2a63c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Push"",
                    ""type"": ""Button"",
                    ""id"": ""2d03b338-0353-459e-bf83-0a4219b1fc00"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""7e9e48f4-cf8c-44f2-ad7c-1ab6833ae93e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6af53bd1-ca0d-41ae-9a0c-c957e657e71d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57c99a9d-19cd-41d7-97a7-044b40e4f5bd"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f83efa4-afe6-44d7-8052-77a43be7bb72"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a0cc63f-d496-4fcf-829b-ecfb97ecefe4"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""2Controller"",
            ""id"": ""5af731ba-c697-47e4-9ec8-7c7a230cde4d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5bb0dc0c-c0d2-4835-890f-a7f61ec610aa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pull"",
                    ""type"": ""Button"",
                    ""id"": ""d65f1a16-309f-40bc-b22f-e9210b4dd5bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Push"",
                    ""type"": ""Button"",
                    ""id"": ""7a751fa8-37d3-4c21-82da-2c7d930b13da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""1e01fa0d-ab67-4ae5-9edd-c0d3359acea9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cd12dc1e-e40d-443c-ad72-d0444f134b4d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a17b5cc2-2d30-4e64-a436-8b07d24e8d28"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2824774b-7600-47cd-89b6-337c759c879e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3875a214-896c-445e-977a-37dedae0ed8c"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""CC"",
            ""bindingGroup"": ""CC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""KC"",
            ""bindingGroup"": ""KC"",
            ""devices"": []
        }
    ]
}");
        // 1Keyboard
        m__1Keyboard = asset.FindActionMap("1Keyboard", throwIfNotFound: true);
        m__1Keyboard_Move = m__1Keyboard.FindAction("Move", throwIfNotFound: true);
        m__1Keyboard_Pull = m__1Keyboard.FindAction("Pull", throwIfNotFound: true);
        m__1Keyboard_Push = m__1Keyboard.FindAction("Push", throwIfNotFound: true);
        m__1Keyboard_Boost = m__1Keyboard.FindAction("Boost", throwIfNotFound: true);
        // 2Keyboard
        m__2Keyboard = asset.FindActionMap("2Keyboard", throwIfNotFound: true);
        m__2Keyboard_Move = m__2Keyboard.FindAction("Move", throwIfNotFound: true);
        m__2Keyboard_Pull = m__2Keyboard.FindAction("Pull", throwIfNotFound: true);
        m__2Keyboard_Push = m__2Keyboard.FindAction("Push", throwIfNotFound: true);
        m__2Keyboard_Boost = m__2Keyboard.FindAction("Boost", throwIfNotFound: true);
        // 1Controller
        m__1Controller = asset.FindActionMap("1Controller", throwIfNotFound: true);
        m__1Controller_Move = m__1Controller.FindAction("Move", throwIfNotFound: true);
        m__1Controller_Pull = m__1Controller.FindAction("Pull", throwIfNotFound: true);
        m__1Controller_Push = m__1Controller.FindAction("Push", throwIfNotFound: true);
        m__1Controller_Boost = m__1Controller.FindAction("Boost", throwIfNotFound: true);
        // 2Controller
        m__2Controller = asset.FindActionMap("2Controller", throwIfNotFound: true);
        m__2Controller_Move = m__2Controller.FindAction("Move", throwIfNotFound: true);
        m__2Controller_Pull = m__2Controller.FindAction("Pull", throwIfNotFound: true);
        m__2Controller_Push = m__2Controller.FindAction("Push", throwIfNotFound: true);
        m__2Controller_Boost = m__2Controller.FindAction("Boost", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // 1Keyboard
    private readonly InputActionMap m__1Keyboard;
    private I_1KeyboardActions m__1KeyboardActionsCallbackInterface;
    private readonly InputAction m__1Keyboard_Move;
    private readonly InputAction m__1Keyboard_Pull;
    private readonly InputAction m__1Keyboard_Push;
    private readonly InputAction m__1Keyboard_Boost;
    public struct _1KeyboardActions
    {
        private @GameInput m_Wrapper;
        public _1KeyboardActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m__1Keyboard_Move;
        public InputAction @Pull => m_Wrapper.m__1Keyboard_Pull;
        public InputAction @Push => m_Wrapper.m__1Keyboard_Push;
        public InputAction @Boost => m_Wrapper.m__1Keyboard_Boost;
        public InputActionMap Get() { return m_Wrapper.m__1Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(_1KeyboardActions set) { return set.Get(); }
        public void SetCallbacks(I_1KeyboardActions instance)
        {
            if (m_Wrapper.m__1KeyboardActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m__1KeyboardActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m__1KeyboardActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m__1KeyboardActionsCallbackInterface.OnMove;
                @Pull.started -= m_Wrapper.m__1KeyboardActionsCallbackInterface.OnPull;
                @Pull.performed -= m_Wrapper.m__1KeyboardActionsCallbackInterface.OnPull;
                @Pull.canceled -= m_Wrapper.m__1KeyboardActionsCallbackInterface.OnPull;
                @Push.started -= m_Wrapper.m__1KeyboardActionsCallbackInterface.OnPush;
                @Push.performed -= m_Wrapper.m__1KeyboardActionsCallbackInterface.OnPush;
                @Push.canceled -= m_Wrapper.m__1KeyboardActionsCallbackInterface.OnPush;
                @Boost.started -= m_Wrapper.m__1KeyboardActionsCallbackInterface.OnBoost;
                @Boost.performed -= m_Wrapper.m__1KeyboardActionsCallbackInterface.OnBoost;
                @Boost.canceled -= m_Wrapper.m__1KeyboardActionsCallbackInterface.OnBoost;
            }
            m_Wrapper.m__1KeyboardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Pull.started += instance.OnPull;
                @Pull.performed += instance.OnPull;
                @Pull.canceled += instance.OnPull;
                @Push.started += instance.OnPush;
                @Push.performed += instance.OnPush;
                @Push.canceled += instance.OnPush;
                @Boost.started += instance.OnBoost;
                @Boost.performed += instance.OnBoost;
                @Boost.canceled += instance.OnBoost;
            }
        }
    }
    public _1KeyboardActions @_1Keyboard => new _1KeyboardActions(this);

    // 2Keyboard
    private readonly InputActionMap m__2Keyboard;
    private I_2KeyboardActions m__2KeyboardActionsCallbackInterface;
    private readonly InputAction m__2Keyboard_Move;
    private readonly InputAction m__2Keyboard_Pull;
    private readonly InputAction m__2Keyboard_Push;
    private readonly InputAction m__2Keyboard_Boost;
    public struct _2KeyboardActions
    {
        private @GameInput m_Wrapper;
        public _2KeyboardActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m__2Keyboard_Move;
        public InputAction @Pull => m_Wrapper.m__2Keyboard_Pull;
        public InputAction @Push => m_Wrapper.m__2Keyboard_Push;
        public InputAction @Boost => m_Wrapper.m__2Keyboard_Boost;
        public InputActionMap Get() { return m_Wrapper.m__2Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(_2KeyboardActions set) { return set.Get(); }
        public void SetCallbacks(I_2KeyboardActions instance)
        {
            if (m_Wrapper.m__2KeyboardActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m__2KeyboardActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m__2KeyboardActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m__2KeyboardActionsCallbackInterface.OnMove;
                @Pull.started -= m_Wrapper.m__2KeyboardActionsCallbackInterface.OnPull;
                @Pull.performed -= m_Wrapper.m__2KeyboardActionsCallbackInterface.OnPull;
                @Pull.canceled -= m_Wrapper.m__2KeyboardActionsCallbackInterface.OnPull;
                @Push.started -= m_Wrapper.m__2KeyboardActionsCallbackInterface.OnPush;
                @Push.performed -= m_Wrapper.m__2KeyboardActionsCallbackInterface.OnPush;
                @Push.canceled -= m_Wrapper.m__2KeyboardActionsCallbackInterface.OnPush;
                @Boost.started -= m_Wrapper.m__2KeyboardActionsCallbackInterface.OnBoost;
                @Boost.performed -= m_Wrapper.m__2KeyboardActionsCallbackInterface.OnBoost;
                @Boost.canceled -= m_Wrapper.m__2KeyboardActionsCallbackInterface.OnBoost;
            }
            m_Wrapper.m__2KeyboardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Pull.started += instance.OnPull;
                @Pull.performed += instance.OnPull;
                @Pull.canceled += instance.OnPull;
                @Push.started += instance.OnPush;
                @Push.performed += instance.OnPush;
                @Push.canceled += instance.OnPush;
                @Boost.started += instance.OnBoost;
                @Boost.performed += instance.OnBoost;
                @Boost.canceled += instance.OnBoost;
            }
        }
    }
    public _2KeyboardActions @_2Keyboard => new _2KeyboardActions(this);

    // 1Controller
    private readonly InputActionMap m__1Controller;
    private I_1ControllerActions m__1ControllerActionsCallbackInterface;
    private readonly InputAction m__1Controller_Move;
    private readonly InputAction m__1Controller_Pull;
    private readonly InputAction m__1Controller_Push;
    private readonly InputAction m__1Controller_Boost;
    public struct _1ControllerActions
    {
        private @GameInput m_Wrapper;
        public _1ControllerActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m__1Controller_Move;
        public InputAction @Pull => m_Wrapper.m__1Controller_Pull;
        public InputAction @Push => m_Wrapper.m__1Controller_Push;
        public InputAction @Boost => m_Wrapper.m__1Controller_Boost;
        public InputActionMap Get() { return m_Wrapper.m__1Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(_1ControllerActions set) { return set.Get(); }
        public void SetCallbacks(I_1ControllerActions instance)
        {
            if (m_Wrapper.m__1ControllerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m__1ControllerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m__1ControllerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m__1ControllerActionsCallbackInterface.OnMove;
                @Pull.started -= m_Wrapper.m__1ControllerActionsCallbackInterface.OnPull;
                @Pull.performed -= m_Wrapper.m__1ControllerActionsCallbackInterface.OnPull;
                @Pull.canceled -= m_Wrapper.m__1ControllerActionsCallbackInterface.OnPull;
                @Push.started -= m_Wrapper.m__1ControllerActionsCallbackInterface.OnPush;
                @Push.performed -= m_Wrapper.m__1ControllerActionsCallbackInterface.OnPush;
                @Push.canceled -= m_Wrapper.m__1ControllerActionsCallbackInterface.OnPush;
                @Boost.started -= m_Wrapper.m__1ControllerActionsCallbackInterface.OnBoost;
                @Boost.performed -= m_Wrapper.m__1ControllerActionsCallbackInterface.OnBoost;
                @Boost.canceled -= m_Wrapper.m__1ControllerActionsCallbackInterface.OnBoost;
            }
            m_Wrapper.m__1ControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Pull.started += instance.OnPull;
                @Pull.performed += instance.OnPull;
                @Pull.canceled += instance.OnPull;
                @Push.started += instance.OnPush;
                @Push.performed += instance.OnPush;
                @Push.canceled += instance.OnPush;
                @Boost.started += instance.OnBoost;
                @Boost.performed += instance.OnBoost;
                @Boost.canceled += instance.OnBoost;
            }
        }
    }
    public _1ControllerActions @_1Controller => new _1ControllerActions(this);

    // 2Controller
    private readonly InputActionMap m__2Controller;
    private I_2ControllerActions m__2ControllerActionsCallbackInterface;
    private readonly InputAction m__2Controller_Move;
    private readonly InputAction m__2Controller_Pull;
    private readonly InputAction m__2Controller_Push;
    private readonly InputAction m__2Controller_Boost;
    public struct _2ControllerActions
    {
        private @GameInput m_Wrapper;
        public _2ControllerActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m__2Controller_Move;
        public InputAction @Pull => m_Wrapper.m__2Controller_Pull;
        public InputAction @Push => m_Wrapper.m__2Controller_Push;
        public InputAction @Boost => m_Wrapper.m__2Controller_Boost;
        public InputActionMap Get() { return m_Wrapper.m__2Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(_2ControllerActions set) { return set.Get(); }
        public void SetCallbacks(I_2ControllerActions instance)
        {
            if (m_Wrapper.m__2ControllerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m__2ControllerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m__2ControllerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m__2ControllerActionsCallbackInterface.OnMove;
                @Pull.started -= m_Wrapper.m__2ControllerActionsCallbackInterface.OnPull;
                @Pull.performed -= m_Wrapper.m__2ControllerActionsCallbackInterface.OnPull;
                @Pull.canceled -= m_Wrapper.m__2ControllerActionsCallbackInterface.OnPull;
                @Push.started -= m_Wrapper.m__2ControllerActionsCallbackInterface.OnPush;
                @Push.performed -= m_Wrapper.m__2ControllerActionsCallbackInterface.OnPush;
                @Push.canceled -= m_Wrapper.m__2ControllerActionsCallbackInterface.OnPush;
                @Boost.started -= m_Wrapper.m__2ControllerActionsCallbackInterface.OnBoost;
                @Boost.performed -= m_Wrapper.m__2ControllerActionsCallbackInterface.OnBoost;
                @Boost.canceled -= m_Wrapper.m__2ControllerActionsCallbackInterface.OnBoost;
            }
            m_Wrapper.m__2ControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Pull.started += instance.OnPull;
                @Pull.performed += instance.OnPull;
                @Pull.canceled += instance.OnPull;
                @Push.started += instance.OnPush;
                @Push.performed += instance.OnPush;
                @Push.canceled += instance.OnPush;
                @Boost.started += instance.OnBoost;
                @Boost.performed += instance.OnBoost;
                @Boost.canceled += instance.OnBoost;
            }
        }
    }
    public _2ControllerActions @_2Controller => new _2ControllerActions(this);
    private int m_CCSchemeIndex = -1;
    public InputControlScheme CCScheme
    {
        get
        {
            if (m_CCSchemeIndex == -1) m_CCSchemeIndex = asset.FindControlSchemeIndex("CC");
            return asset.controlSchemes[m_CCSchemeIndex];
        }
    }
    private int m_KCSchemeIndex = -1;
    public InputControlScheme KCScheme
    {
        get
        {
            if (m_KCSchemeIndex == -1) m_KCSchemeIndex = asset.FindControlSchemeIndex("KC");
            return asset.controlSchemes[m_KCSchemeIndex];
        }
    }
    public interface I_1KeyboardActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnPull(InputAction.CallbackContext context);
        void OnPush(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
    }
    public interface I_2KeyboardActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnPull(InputAction.CallbackContext context);
        void OnPush(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
    }
    public interface I_1ControllerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnPull(InputAction.CallbackContext context);
        void OnPush(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
    }
    public interface I_2ControllerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnPull(InputAction.CallbackContext context);
        void OnPush(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
    }
}
